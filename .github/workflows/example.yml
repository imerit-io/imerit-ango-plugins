# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the $default-branch branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Storage
#      roles/storage.admin   (if using Google Container Registry (gcr) instead)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 5. Change the values for the PROJECT_ID, REPOSITORY and REGION environment variables (below).
#

# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

# # Below are the Instructions for iMerit Deployment of Ango Plugins utilizing REST functionality

# name: Example-Deployment # Name your Github Actions Deployment, example: Stage-Export-Deployment
# env:
#   PROJECT_ID: ango-plugins # don't change
#   REGION: europe-west3 # don't change
#   GAR_LOCATION: europe # don't change
#   REPOSITORY: ango-plugins # don't change
#   SERVICE: example-plugin # This will name your Google Cloud Run Service App, example: stage-export

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - "example-plugin/**" # Change this for new deployments with the name of Cloud Run Service,
#         # this_is_the_plugin_root_folder_name/**
#         # the wildcards (**) indicate all content within the root folder, including subdirectories
#         # example: stage-export/**
#   pull_request:
#     branches:
#       - main
#     paths:
#       - "example-plugin/**" # Change this for new deployments with the name of Cloud Run Service,
#         # this_is_the_plugin_root_folder_name/**
#         # the wildcards (**) indicate all content within the root folder, including subdirectories
#         # example: stage-export/**

# jobs:
#   deploy:
#     environment: ango-plugins-cloudrun # You may optionally define some common envs and secret in environment to reuse
#     # Add 'id-token' with the intended permissions for workload identity federation
#     permissions:
#       contents: "read"
#       id-token: "write"

#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Google Auth
#         id: auth
#         uses: "google-github-actions/auth@v2"
#         with:
#           credentials_json: ${{ secrets.GCP_CREDENTIALS }}

#       # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

#       - name: Docker Auth
#         id: docker-auth
#         uses: "docker/login-action@v3"
#         with:
#           registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
#           username: _json_key
#           password: ${{ secrets.GCP_CREDENTIALS }}

#       - name: Build and Push Container
#         run: |-
#           docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./${{ env.SERVICE }}
#           docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

#       # END - Docker auth and build

#       - name: Deploy to Cloud Run
#         id: deploy
#         uses: google-github-actions/deploy-cloudrun@v2
#         with:
#           service: ${{ env.SERVICE }}
#           region: ${{ env.REGION }}
#           image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
#           env_vars: |
#             CONNECTOR=REST
#             HOST=https://imeritapi.ango.ai
#             PLUGIN_ID=REPLACE_WITH_ANGO_PLUGIN_ID
#             PLUGIN_SECRET=REPLACE_WITH_ANGO_PLUGIN_SECRET
#           no-allow-unauthenticated: false

#       # If required, use the Cloud Run url output in later steps
#       - name: Show Output
#         run: echo ${{ steps.deploy.outputs.url }}
